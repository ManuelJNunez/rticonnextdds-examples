import groovy.io.FileType
import org.gradle.api.BuildCancelledException
import org.gradle.internal.os.OperatingSystem

plugins {
    id "de.undercouch.download" version "4.1.1"
}

task("findConnextDds") {
    def nddsHome = System.getenv("NDDSHOME")
    def foundTarget = System.getenv("CONNEXTDDS_ARCH")

    if (nddsHome) {
        println "Found RTIConnextDDS: ${nddsHome}"
        println "Found target: ${foundTarget}"
    } else {
        throw new BuildCancelledException(
            "ERROR: RTIConnextDDS not found, please set the environment variables.")
    }
}

task("downloadVSWhere") {
    if (OperatingSystem.current().isWindows()) {
        download {
            src "https://github.com/microsoft/vswhere/releases/download/2.8.4/vswhere.exe"
            dest "../../resources/vswhere/vswhere.exe"
            overwrite false
        }
    }
}

task("findClExePreprocessor") {
    dependsOn 'downloadVSWhere'
    doLast {
        if(OperatingSystem.current().isWindows()) {
            def vswhereExecutable = new File(
                "../../resources/vswhere/vswhere.exe"
            )

            if (!vswhereExecutable.canExecute()) {
                fail(
                    "vswhere.exe program is not executable. It is needed to find "
                    + "the latest Visual Studio installation"
                )
            }

            def cmd = ("${vswhereExecutable.absolutePath} -legacy -latest "
                + "-format value -property installationPath")
            latestVsInstallation = new File(cmd.execute().text.trim())
            def clExePath

            latestVsInstallation.eachFileRecurse(FileType.FILES) { file ->
                if (
                    file.toString().endsWith('VC/bin/cl.exe')
                    || file.toString().endsWith('bin/Hostx64/x64/cl.exe')
                ) {
                    clExePath = file.toString()
                }
            }

            println clExePath
        }
    }
}


findConnextDds.finalizedBy downloadVSWhere
